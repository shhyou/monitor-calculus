{-# OPTIONS --without-K --safe #-}

module Example.Count.NonDecreasingInterpretation where

open import Syntax.Type
open import Syntax.Term
open import Syntax.Template
open import OpSemantics.Base
open import Annotation.Language
open import Annotation.Interpretation
open import Annotation.Soundness
open import Example.Count.Annotation

open import Relation.Binary.PropositionalEquality as PropEq
  using (_‚â°_; refl; cong; sym; subst; module ‚â°-Reasoning)

open import Data.Unit.Base as Unit using (‚ä§; tt)
open import Data.Nat.Base as Nat using (‚Ñï; zero; suc; _‚â§_; z‚â§n; s‚â§s; _<_)
import Data.Nat.Properties as Nat
open import Data.Product.Base as Product
  using (Œ£; _,_; proj‚ÇÅ; proj‚ÇÇ; Œ£-syntax; ‚àÉ; ‚àÉ-syntax; _√ó_ ; _,‚Ä≤_)

open import Data.List.Base using (List; []; _‚à∑_)
open import Data.List.Relation.Unary.All as ListAll using (All; []; _‚à∑_)
open import Data.List.Relation.Unary.Any as ListAny using (Any; here; there)
open import Data.List.Membership.Propositional using (_‚àà_)

open import Function.Base using (_on_; _‚àò‚Ä≤_; id)

private variable
  ùíú : AnnTerm
  ùíØ : AnnTransit ùíú

  Ann : AnnSig

module _ {ùíú : AnnTerm} (ùíúview : AnnTermView ùíú ùíúcnt) where
  open AnnTerm ùíú using (Ann; State)
  open AnnTermViewUtils ùíúview

  ‚Ñêinc : ‚àÄ ùíØ ‚Üí AnnIntr {ùíú} (ùíØ ‚à©tr ùíØcnt ùíúview)
  AnnIntr.Ix         (‚Ñêinc ùíØ) = ‚ä§
  AnnIntr.IxRel      (‚Ñêinc ùíØ) A ix ix‚Ä≤ = ‚ä§
  AnnIntr.Inv        (‚Ñêinc ùíØ) s = ‚ä§
  AnnIntr.Ord        (‚Ñêinc ùíØ) = _‚â§_ on (getState ‚àò‚Ä≤ proj‚ÇÅ)
  AnnIntr.isPreorder (‚Ñêinc ùíØ) =
    record  { isEquivalence = PropEq.isEquivalence
            ; reflexive = Nat.‚â§-reflexive ‚àò‚Ä≤ cong (getState ‚àò‚Ä≤ proj‚ÇÅ)
            ; trans = Nat.‚â§-trans
            }
  AnnIntr.ùîπ          (‚Ñêinc ùíØ) A ix‚óÅix‚Ä≤ e = ‚ä§
  AnnIntr.ùîπSound     (‚Ñêinc ùíØ) step inv inv‚Ä≤ mono bsat = bsat
  AnnIntr.‚Ñô          (‚Ñêinc ùíØ) {œÑ = œÑ} A ix‚óÅix‚Ä≤ em = ‚ä§

  ‚Ñêinc-monotonic : ‚àÄ ùíØ ‚Üí AnnTransitInterpIs (‚Ñêinc ùíØ) Monotonic
  ‚Ñêinc-monotonic ùíØ `R-cross-unit {s‚ÇÅ = s‚ÇÅ}
    (mkStep refl termEnv (mkTerm œà‚ÇÅ refl) (mkTerm œà‚ÇÇ refl) premWit
      trWit@(tr , c‚Ä≤‚â°1+c@refl))
    (B/i ix ix‚Ä≤ ix‚óÅix‚Ä≤ bsat ‚ãÜ)
    termSat =
      _ , subst (c ‚â§_) (sym (AnnTermView.put-get ùíúview s‚ÇÅ (suc c))) (Nat.m‚â§n+m c 1) where c = getState s‚ÇÅ
  ‚Ñêinc-monotonic ùíØ `R-cross-nat {s‚ÇÅ = s‚ÇÅ}
    (mkStep refl termEnv (mkTerm œà‚ÇÅ refl) (mkTerm œà‚ÇÇ refl) premWit
      trWit@(tr , c‚Ä≤‚â°1+c@refl))
    (B/i ix ix‚Ä≤ ix‚óÅix‚Ä≤ bsat esat)
    termSat =
      _ , subst (c ‚â§_) (sym (AnnTermView.put-get ùíúview s‚ÇÅ (suc c))) (Nat.m‚â§n+m c 1) where c = getState s‚ÇÅ
  ‚Ñêinc-monotonic ùíØ `R-cross-cons {s‚ÇÅ = s‚ÇÅ}
    (mkStep ((œÑ‚ÇÅ , œÑ‚ÇÇ) , refl) termEnv (mkTerm œà‚ÇÅ refl) (mkTerm œà‚ÇÇ refl) premWit
      trWit@(tr , c‚Ä≤‚â°1+c@refl))
    (B/i ix ix‚Ä≤ ix‚óÅix‚Ä≤ bsat (esat‚ÇÅ `, esat‚ÇÇ))
    termSat =
      _ , subst (c ‚â§_) (sym (AnnTermView.put-get ùíúview s‚ÇÅ (suc c))) (Nat.m‚â§n+m c 1) where c = getState s‚ÇÅ
  ‚Ñêinc-monotonic ùíØ `R-cross-inl {s‚ÇÅ = s‚ÇÅ}
    (mkStep ((œÑ‚ÇÅ , œÑ‚ÇÇ) , refl) termEnv (mkTerm œà‚ÇÅ refl) (mkTerm œà‚ÇÇ refl) premWit
      trWit@(tr , c‚Ä≤‚â°1+c@refl))
    (B/i ix ix‚Ä≤ ix‚óÅix‚Ä≤ bsat (inl esat))
    termSat =
      _ , subst (c ‚â§_) (sym (AnnTermView.put-get ùíúview s‚ÇÅ (suc c))) (Nat.m‚â§n+m c 1) where c = getState s‚ÇÅ
  ‚Ñêinc-monotonic ùíØ `R-cross-inr {s‚ÇÅ = s‚ÇÅ}
    (mkStep ((œÑ‚ÇÅ , œÑ‚ÇÇ) , refl) termEnv (mkTerm œà‚ÇÅ refl) (mkTerm œà‚ÇÇ refl) premWit
      trWit@(tr , c‚Ä≤‚â°1+c@refl))
    (B/i ix ix‚Ä≤ ix‚óÅix‚Ä≤ bsat (inr esat))
    termSat =
      _ , subst (c ‚â§_) (sym (AnnTermView.put-get ùíúview s‚ÇÅ (suc c))) (Nat.m‚â§n+m c 1) where c = getState s‚ÇÅ
  ‚Ñêinc-monotonic ùíØ `R-cross-roll {s‚ÇÅ = s‚ÇÅ}
    (mkStep (œÑ‚Ä≤ , refl) termEnv (mkTerm œà‚ÇÅ refl) (mkTerm œà‚ÇÇ refl) premWit
      trWit@(tr , c‚Ä≤‚â°1+c@refl))
    (B/i ix ix‚Ä≤ ix‚óÅix‚Ä≤ bsat (roll .œÑ‚Ä≤ esat))
    termSat =
      _ , subst (c ‚â§_) (sym (AnnTermView.put-get ùíúview s‚ÇÅ (suc c))) (Nat.m‚â§n+m c 1) where c = getState s‚ÇÅ
  ‚Ñêinc-monotonic ùíØ `R-cross-box {s‚ÇÅ = s‚ÇÅ}
    (mkStep (œÑ‚Ä≤ , refl) termEnv (mkTerm œà‚ÇÅ refl) (mkTerm œà‚ÇÇ refl) premWit
      trWit@(tr , c‚Ä≤‚â°1+c@refl))
    (B/i ix ix‚Ä≤ ix‚óÅix‚Ä≤ bsat (box esat))
    termSat =
      _ , subst (c ‚â§_) (sym (AnnTermView.put-get ùíúview s‚ÇÅ (suc c))) (Nat.m‚â§n+m c 1) where c = getState s‚ÇÅ
  ‚Ñêinc-monotonic ùíØ `R-cross-lam {s‚ÇÅ = s‚ÇÅ}
    (mkStep ((œÑ‚Çê , œÑ·µ£) , refl) termEnv (mkTerm œà‚ÇÅ refl) (mkTerm œà‚ÇÇ refl) premWit
      trWit@(tr , c‚Ä≤‚â°1+c@refl))
    (B/i ix ix‚Ä≤ ix‚óÅix‚Ä≤ bsat (∆õ esat))
    termSat =
      _ , subst (c ‚â§_) (sym (AnnTermView.put-get ùíúview s‚ÇÅ (suc c))) (Nat.m‚â§n+m c 1) where c = getState s‚ÇÅ
  ‚Ñêinc-monotonic ùíØ `R-merge-box {s‚ÇÅ = s‚ÇÅ}
    (mkStep (œÑ‚Ä≤ , refl) termEnv (mkTerm œà‚ÇÅ refl) (mkTerm œà‚ÇÇ refl) premWit
      trWit@(tr , c‚Ä≤‚â°1+c@refl))
    (B/i ix ix‚Ä≤ ix‚óÅix‚Ä≤ bsat (proxy/i em .ix‚Ä≤ ix‚Ä≥ ix‚Ä≤‚óÅix‚Ä≥ psat (box esat)))
    termSat =
      _ , subst (c ‚â§_) (sym (AnnTermView.put-get ùíúview s‚ÇÅ (suc c))) (Nat.m‚â§n+m c 1) where c = getState s‚ÇÅ
  ‚Ñêinc-monotonic ùíØ `R-merge-lam {s‚ÇÅ = s‚ÇÅ}
    (mkStep ((œÑ‚Çê , œÑ·µ£) , refl) termEnv (mkTerm œà‚ÇÅ refl) (mkTerm œà‚ÇÇ refl) premWit
      trWit@(tr , c‚Ä≤‚â°1+c@refl))
    (B/i ix ix‚Ä≤ ix‚óÅix‚Ä≤ bsat (proxy/i em .ix‚Ä≤ ix‚Ä≥ ix‚Ä≤‚óÅix‚Ä≥ psat (∆õ esat)))
    termSat =
      _ , subst (c ‚â§_) (sym (AnnTermView.put-get ùíúview s‚ÇÅ (suc c))) (Nat.m‚â§n+m c 1) where c = getState s‚ÇÅ
  ‚Ñêinc-monotonic ùíØ `R-proxy-unbox {s‚ÇÅ = s‚ÇÅ}
    (mkStep tt termEnv (mkTerm œà‚ÇÅ refl) (mkTerm œà‚ÇÇ refl) premWit
      trWit@(tr , c‚Ä≤‚â°1+c@refl))
    (unbox (proxy/i em ix ix‚Ä≤ ix‚óÅix‚Ä≤ psat (box esat)))
    termSat =
      _ , subst (c ‚â§_) (sym (AnnTermView.put-get ùíúview s‚ÇÅ (suc c))) (Nat.m‚â§n+m c 1) where c = getState s‚ÇÅ
  ‚Ñêinc-monotonic ùíØ `R-proxy-Œ≤ {s‚ÇÅ = s‚ÇÅ}
    (mkStep œÑ‚Çê termEnv (mkTerm œà‚ÇÅ refl) (mkTerm œà‚ÇÇ refl) premWit
      trWit@(tr , c‚Ä≤‚â°1+c@refl))
    ((proxy/i em ix ix‚Ä≤ ix‚óÅix‚Ä≤ psat (∆õ esat)) ¬∑ esat‚Çê)
    termSat =
      _ , subst (c ‚â§_) (sym (AnnTermView.put-get ùíúview s‚ÇÅ (suc c))) (Nat.m‚â§n+m c 1) where c = getState s‚ÇÅ

  ‚Ñêinc-sound : ‚àÄ ùíØ ‚Üí AnnTransitInterpIs (‚Ñêinc ùíØ) Sound
  ‚Ñêinc-sound ùíØ `R-cross-unit
    (mkStep refl termEnv (mkTerm œà‚ÇÅ refl) (mkTerm œà‚ÇÇ refl) premWit trWit)
    (B/i ix ix‚Ä≤ ix‚óÅix‚Ä≤ bsat ‚ãÜ) termSat inv‚Ä≤,mono = record
      { annCtxtIx = Œª ()
      ; annIx = Œª ()
      ; isTermIx = tt
      ; boundarySat = tt
      }
  ‚Ñêinc-sound ùíØ `R-cross-nat
    (mkStep refl termEnv (mkTerm œà‚ÇÅ refl) (mkTerm œà‚ÇÇ refl) premWit trWit)
    (B/i ix ix‚Ä≤ ix‚óÅix‚Ä≤ bsat esat) termSat inv‚Ä≤,mono = record
      { annCtxtIx = Œª ()
      ; annIx = Œª ()
      ; isTermIx = id
      ; boundarySat = tt
      }
  ‚Ñêinc-sound ùíØ `R-cross-cons
    (mkStep ((œÑ‚ÇÅ , œÑ‚ÇÇ) , refl) termEnv (mkTerm œà‚ÇÅ refl) (mkTerm œà‚ÇÇ refl) premWit trWit)
    (B/i ix ix‚Ä≤ ix‚óÅix‚Ä≤ bsat (esat‚ÇÅ `, esat‚ÇÇ)) termSat inv‚Ä≤,mono = record
      { annCtxtIx = Œª x ‚Üí tt
      ; annIx = Œª x ‚Üí tt
      ; isTermIx = refl ,‚Ä≤ id ,‚Ä≤ refl ,‚Ä≤ id
      ; boundarySat = (tt , tt) ,‚Ä≤ (tt , tt)
      }
  ‚Ñêinc-sound ùíØ `R-cross-inl
    (mkStep ((œÑ‚ÇÅ , œÑ‚ÇÇ) , refl) termEnv (mkTerm œà‚ÇÅ refl) (mkTerm œà‚ÇÇ refl) premWit trWit)
    (B/i ix ix‚Ä≤ ix‚óÅix‚Ä≤ bsat (inl esat)) termSat inv‚Ä≤,mono = record
      { annCtxtIx = Œª x ‚Üí tt
      ; annIx = Œª x ‚Üí tt
      ; isTermIx = refl ,‚Ä≤ id
      ; boundarySat = tt , tt
      }
  ‚Ñêinc-sound ùíØ `R-cross-inr
    (mkStep ((œÑ‚ÇÅ , œÑ‚ÇÇ) , refl) termEnv (mkTerm œà‚ÇÅ refl) (mkTerm œà‚ÇÇ refl) premWit trWit)
    (B/i ix ix‚Ä≤ ix‚óÅix‚Ä≤ bsat (inr esat)) termSat inv‚Ä≤,mono = record
      { annCtxtIx = Œª x ‚Üí tt
      ; annIx = Œª x ‚Üí tt
      ; isTermIx = refl ,‚Ä≤ id
      ; boundarySat = tt , tt
      }
  ‚Ñêinc-sound ùíØ `R-cross-roll
    (mkStep (œÑ‚Ä≤ , refl) termEnv (mkTerm œà‚ÇÅ refl) (mkTerm œà‚ÇÇ refl) premWit trWit)
    (B/i ix ix‚Ä≤ ix‚óÅix‚Ä≤ bsat (roll œÑ esat)) termSat inv‚Ä≤,mono = record
      { annCtxtIx = Œª x ‚Üí tt
      ; annIx = Œª x ‚Üí tt
      ; isTermIx = refl ,‚Ä≤ id
      ; boundarySat = tt , tt
      }
  ‚Ñêinc-sound ùíØ `R-cross-box
    (mkStep (œÑ‚Ä≤ , refl) termEnv (mkTerm œà‚ÇÅ refl) (mkTerm œà‚ÇÇ refl) premWit trWit)
    (B/i ix ix‚Ä≤ ix‚óÅix‚Ä≤ bsat (box esat)) termSat inv‚Ä≤,mono = record
      { annCtxtIx = Œª x ‚Üí tt
      ; annIx = Œª x ‚Üí tt
      ; isTermIx = refl ,‚Ä≤ id
      ; boundarySat = tt , tt
      }
  ‚Ñêinc-sound ùíØ `R-cross-lam
    (mkStep ((œÑ‚Çê , œÑ·µ£) , refl) termEnv (mkTerm œà‚ÇÅ refl) (mkTerm œà‚ÇÇ refl) premWit trWit)
    (B/i ix ix‚Ä≤ ix‚óÅix‚Ä≤ bsat (∆õ esat)) termSat inv‚Ä≤,mono = record
      { annCtxtIx = Œª x ‚Üí tt
      ; annIx = Œª x ‚Üí tt
      ; isTermIx = refl ,‚Ä≤ id
      ; boundarySat = tt , tt
     }
  ‚Ñêinc-sound ùíØ `R-merge-box
    step@(mkStep (œÑ‚Ä≤ , refl)
            termEnv
            (mkTerm œà‚ÇÅ refl)
            (mkTerm œà‚ÇÇ refl)
            premWit
            trWit)
    (B/i ix ix‚Ä≤ ix‚óÅix‚Ä≤ bsat (proxy/i (box/m e‚Çò) .ix‚Ä≤ ix‚Ä≥ ix‚Ä≤‚óÅix‚Ä≥ psat (box esatm)))
    termSat@record { metaVarIx = mvix‚ÇÅ
                   ; boundarySat = ((tt , tt) , (tt , tt)) }
    mono = record
      { annCtxtIx = Œª x ‚Üí tt
      ; annIx = Œª x ‚Üí tt
      ; isTermIx = refl ,‚Ä≤ id
      ; boundarySat = tt , tt
      }
  ‚Ñêinc-sound ùíØ `R-merge-lam
    (mkStep ((œÑ‚Çê , œÑ·µ£) , refl)
            termEnv
            (mkTerm œà‚ÇÅ refl)
            (mkTerm œà‚ÇÇ refl)
            premWit
            trWit)
    (B/i ix ix‚Ä≤ ix‚óÅix‚Ä≤ bsat (proxy/i (∆õ/m eb) .ix‚Ä≤ ix‚Ä≥ ix‚Ä≤‚óÅix‚Ä≥ psat (∆õ esatb)))
    termSat inv‚Ä≤,mono = record
      { annCtxtIx = Œª x ‚Üí tt
      ; annIx = Œª x ‚Üí tt
      ; isTermIx = refl ,‚Ä≤ id
      ; boundarySat = tt , tt
      }
  ‚Ñêinc-sound ùíØ `R-proxy-unbox
    (mkStep tt termEnv (mkTerm œà‚ÇÅ refl) (mkTerm œà‚ÇÇ refl) premWit trWit)
    (unbox (proxy/i em ix ix‚Ä≤ ix‚óÅix‚Ä≤ psat (box esat))) termSat inv‚Ä≤,mono = record
      { annCtxtIx = Œª x ‚Üí tt
      ; annIx = Œª x ‚Üí tt
      ; isTermIx = refl ,‚Ä≤ id
      ; boundarySat = tt , tt
      }
  ‚Ñêinc-sound ùíØ `R-proxy-Œ≤
    (mkStep œÑ‚Çê termEnv (mkTerm œà‚ÇÅ refl) (mkTerm œà‚ÇÇ refl) premWit trWit)
    ((proxy/i em ix ix‚Ä≤ ix‚óÅix‚Ä≤ psat (∆õ esat)) ¬∑ esat‚Çê) termSat inv‚Ä≤,mono = record
      { annCtxtIx = Œª x ‚Üí tt
      ; annIx = Œª x ‚Üí tt
      ; isTermIx = refl ,‚Ä≤ id ,‚Ä≤ refl ,‚Ä≤ id
      ; boundarySat = (tt , tt) ,‚Ä≤ (tt , tt)
      }
