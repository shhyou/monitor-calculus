{-# OPTIONS --safe --without-K #-}

open import Relation.Nullary using (Dec; yes; no; _because_; of ∏; of‚Åø)
open import Data.Unit.Base as Unit using (‚ä§; tt)

open import Annotation.Language
open import SpaceEfficient.Base
  using ()
  renaming (ùíúcctc to SEùíúcctc)
open import SpaceEfficient.OrderedPredicate
  using ()
  renaming (Pred to SEPred)

module SpaceEfficient.Properties.Size
  (Label : Set)
  {ùíú : AnnTerm}
  (ùíúcctc-view : AnnTermView ùíú (SEùíúcctc Label ùíú))
  (stronger? : SEPred Label ùíú ‚Üí SEPred Label ùíú ‚Üí Dec ‚ä§)
  where

open import Relation.Binary.PropositionalEquality as PropEq
  using (_‚â°_; refl; subst; sym; trans; cong; module ‚â°-Reasoning)

open import Data.Unit.Base as Unit using (‚ä§; tt)
open import Data.Empty using (‚ä•; ‚ä•-elim)
open import Data.Sum.Base using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Data.Nat.Base as Nat using (‚Ñï; zero; suc; _+_; _*_; _^_; _‚â§_; z‚â§n; s‚â§s)
open import Data.Nat.Properties as Nat
  using (‚â§-refl; ‚â§-trans; module ‚â§-Reasoning)
open import Data.Product as Product
  using (Œ£; _,_; proj‚ÇÅ; proj‚ÇÇ; Œ£-syntax; ‚àÉ; ‚àÉ-syntax; _√ó_; _,‚Ä≤_; ‚àÉ‚ÇÇ)

open import Data.List.Base as List using (List; []; _‚à∑_; length; map)
import Data.List.Properties as List
open import Data.List.Relation.Unary.Any as ListAny using (Any; any?; here; there)
open import Data.List.Membership.Propositional using (_‚àà_)

open import Function.Base using (_‚àò‚Ä≤_; flip‚Ä≤)

open import Data.NatProperties

open import Syntax.Type
open import Syntax.Term

open import Contract.Common Label
open import Contract.Base Label ùíú
open SpaceEfficient.Base Label ùíú
open import SpaceEfficient.LeafPredicate Label ùíú
open import SpaceEfficient.Size Label ùíú
open import SpaceEfficient.Height Label ùíú
open AnnTerm ùíú hiding (State)

open SECtcTransitSteps ùíúcctc-view stronger?

private variable
  h U : ‚Ñï
  Œî : TCtxt
  Œì : Ctxt
  œÑ œÑ‚Ä≤ œÑ‚ÇÅ œÑ‚ÇÇ œÑ‚Çê œÑ·µ£ : TyN Œî
  cŒ∫ : SECtcN Œî œÑ

cps-leaf-size-bound : SECtcPreds ((_‚â§ U) ‚àò‚Ä≤ length) {Œî} {œÑ} cŒ∫ ‚Üí leaf-size cŒ∫ ‚â§ U
cps-leaf-size-bound (` a)            = z‚â§n
cps-leaf-size-bound 1/ps             = z‚â§n
cps-leaf-size-bound (flat/ps {preds = preds} len‚â§U) = subst (_‚â§ _) (List.length-map flat-pred preds) len‚â§U
cps-leaf-size-bound (cps‚ÇÅ */ps cps‚ÇÇ) = Nat.‚äî-lub (cps-leaf-size-bound cps‚ÇÅ) (cps-leaf-size-bound cps‚ÇÇ)
cps-leaf-size-bound (cps‚ÇÅ +/ps cps‚ÇÇ) = Nat.‚äî-lub (cps-leaf-size-bound cps‚ÇÅ) (cps-leaf-size-bound cps‚ÇÇ)
cps-leaf-size-bound (box/ps cps)     = cps-leaf-size-bound cps
cps-leaf-size-bound (cps‚Çê ‚Üí/ps cps·µ£) = Nat.‚äî-lub (cps-leaf-size-bound cps‚Çê) (cps-leaf-size-bound cps·µ£)
cps-leaf-size-bound (Œº/ps cps)       = cps-leaf-size-bound cps

sectc‚Üícps-leaf-size : ‚àÄ cŒ∫ ‚Üí SECtcPreds ((_‚â§ leaf-size cŒ∫) ‚àò‚Ä≤ length) {Œî} {œÑ} cŒ∫
sectc‚Üícps-leaf-size (` a)           = ` a
sectc‚Üícps-leaf-size 1/cc            = 1/ps
sectc‚Üícps-leaf-size (flat/cc preds) = flat/ps (Nat.‚â§-reflexive (List.length-map flat-pred preds))
sectc‚Üícps-leaf-size (cŒ∫‚ÇÅ */cc cŒ∫‚ÇÇ)  =
  (cps-map (flip‚Ä≤ ‚â§-trans (Nat.m‚â§m‚äîn (leaf-size cŒ∫‚ÇÅ) (leaf-size cŒ∫‚ÇÇ))) (sectc‚Üícps-leaf-size cŒ∫‚ÇÅ)) */ps
  (cps-map (flip‚Ä≤ ‚â§-trans (Nat.m‚â§n‚äîm (leaf-size cŒ∫‚ÇÅ) (leaf-size cŒ∫‚ÇÇ))) (sectc‚Üícps-leaf-size cŒ∫‚ÇÇ))
sectc‚Üícps-leaf-size (cŒ∫‚ÇÅ +/cc cŒ∫‚ÇÇ)  =
  (cps-map (flip‚Ä≤ ‚â§-trans (Nat.m‚â§m‚äîn (leaf-size cŒ∫‚ÇÅ) (leaf-size cŒ∫‚ÇÇ))) (sectc‚Üícps-leaf-size cŒ∫‚ÇÅ)) +/ps
  (cps-map (flip‚Ä≤ ‚â§-trans (Nat.m‚â§n‚äîm (leaf-size cŒ∫‚ÇÅ) (leaf-size cŒ∫‚ÇÇ))) (sectc‚Üícps-leaf-size cŒ∫‚ÇÇ))
sectc‚Üícps-leaf-size (box/cc cŒ∫)     =
  box/ps (sectc‚Üícps-leaf-size cŒ∫)
sectc‚Üícps-leaf-size (cŒ∫‚Çê ‚Üí/cc cŒ∫·µ£)  =
  (cps-map (flip‚Ä≤ ‚â§-trans (Nat.m‚â§m‚äîn (leaf-size cŒ∫‚Çê) (leaf-size cŒ∫·µ£))) (sectc‚Üícps-leaf-size cŒ∫‚Çê)) ‚Üí/ps
  (cps-map (flip‚Ä≤ ‚â§-trans (Nat.m‚â§n‚äîm (leaf-size cŒ∫‚Çê) (leaf-size cŒ∫·µ£))) (sectc‚Üícps-leaf-size cŒ∫·µ£))
sectc‚Üícps-leaf-size (Œº/cc cŒ∫)       =
  Œº/ps (sectc‚Üícps-leaf-size cŒ∫)

private
  c‚ÇÅ : ‚Ñï
  b : ‚Ñï

1‚â§b : 1 ‚â§ b
2‚â§c‚ÇÅ : 2 ‚â§ c‚ÇÅ

‚àÄm:1‚â§2·µê : ‚àÄ m ‚Üí 1 ‚â§ c‚ÇÅ * 2 ^ m
‚àÄm:1‚â§2·µê m = ‚â§-trans (s‚â§s z‚â§n) (Nat.*-mono-‚â§ 2‚â§c‚ÇÅ (Nat.^-mono ≥-‚â§ 2 (z‚â§n {m})))

1‚â§n‚áím‚â§m*n : ‚àÄ m n ‚Üí 1 ‚â§ n ‚Üí m ‚â§ m * n
1‚â§n‚áím‚â§m*n m n 1‚â§n@(s‚â§s _) = Nat.m‚â§m*n m n -- or use {{Nat.>-nonZero 1‚â§n}}

sectc-node-bound : (h : ‚Ñï) ‚Üí ‚Ñï
sectc-node-bound h = c‚ÇÅ * 2 ^ h + b * (‚àë[ i < h ] 2 ^ i)

1‚â§sectc-node-bound : (h : ‚Ñï) ‚Üí 1 ‚â§ sectc-node-bound h
1‚â§sectc-node-bound h = Nat.m‚â§n‚áím‚â§n+o (b * (‚àë[ i < h ] 2 ^ i)) (‚àÄm:1‚â§2·µê h)

sectc-bounded-ind : ‚àÄ h U ‚Üí
  1 ‚â§ U ‚Üí
  SECtcMaxH {Œî} {œÑ} cŒ∫ h ‚Üí
  SECtcPreds ((_‚â§ U) ‚àò‚Ä≤ length) cŒ∫ ‚Üí
  sectc-size cŒ∫ ‚â§ sectc-node-bound h * U

sectc-bounded : ‚àÉ Œª c‚ÇÄ ‚Üí
  1 ‚â§ c‚ÇÄ √ó
  ‚àÄ {Œî œÑ cŒ∫ h U} ‚Üí
    1 ‚â§ U ‚Üí
    SECtcMaxH {Œî} {œÑ} cŒ∫ h ‚Üí
    SECtcPreds ((_‚â§ U) ‚àò‚Ä≤ length) cŒ∫ ‚Üí
    sectc-size cŒ∫ ‚â§ c‚ÇÄ * 2 ^ h * U
sectc-bounded = c‚ÇÄ , 1‚â§c‚ÇÄ ,‚Ä≤ Œª {_} {_} {_} {h = h} {U = U} 1‚â§U cmh cps-len ‚Üí
  ‚â§-trans (sectc-bounded-ind _ _ 1‚â§U cmh cps-len) (Nat.*-monoÀ°-‚â§ U (bnd h))
  where open ‚â§-Reasoning
        c‚ÇÄ = c‚ÇÅ + b * 2
        1‚â§c‚ÇÄ = ‚â§-trans (‚â§-trans (s‚â§s (z‚â§n {1})) 2‚â§c‚ÇÅ) (Nat.m‚â§m+n c‚ÇÅ (b * 2))
        bnd : ‚àÄ h ‚Üí c‚ÇÅ * 2 ^ h + b * (‚àë[ i < h ] 2 ^ i) ‚â§ c‚ÇÄ * 2 ^ h
        bnd h = begin
          c‚ÇÅ * 2 ∞ + b * (‚àë[ i < h ] 2 ^ i)
            ‚â§‚ü® Nat.+-mono ≥-‚â§ (c‚ÇÅ * 2 ∞) (Nat.*-mono ≥-‚â§ b (‚àë-^-‚â§-^ h 2 ‚â§-refl)) ‚ü©
          c‚ÇÅ * 2 ∞ + b * 2¬π‚Å∫ ∞               ‚â°‚ü® cong (c‚ÇÅ * 2 ∞ +_) (Nat.*-assoc b 2 2 ∞) ‚ü®
          c‚ÇÅ * 2 ∞ + (b * 2) * 2 ∞           ‚â°‚ü® Nat.*-distrib ≥-+ 2 ∞ c‚ÇÅ (b * 2) ‚ü®
          (c‚ÇÅ + b * 2) * 2 ∞                ‚â°‚ü®‚ü©
          c‚ÇÄ * 2 ∞                          ‚àé
          where 2 ∞ = 2 ^ h; 2¬π‚Å∫ ∞ = 2 ^ suc h

c‚ÇÅ = 2
2‚â§c‚ÇÅ = ‚â§-refl
b = 1
1‚â§b = ‚â§-refl

sectc-bounded-ind-two : ‚àÄ h U (_ : 1 ‚â§ U) ‚Üí
  1 + sectc-node-bound h * U + sectc-node-bound h * U ‚â§ sectc-node-bound (suc h) * U
sectc-bounded-ind-two h U 1‚â§U = begin
  1 + sectc-node-bound h * U + sectc-node-bound h * U
    ‚â°‚ü® cong (1 +_) (m+m‚â°2m (sectc-node-bound h * U)) ‚ü©
  1 + 2 * (sectc-node-bound h * U)    ‚â°‚ü® cong (1 +_) (Nat.*-assoc 2 (sectc-node-bound h) U) ‚ü®
  1 + 2 * sectc-node-bound h * U      ‚â§‚ü® Nat.+-monoÀ°-‚â§ (2 * sectc-node-bound h * U)
                                          (Nat.*-mono-‚â§ 1‚â§b 1‚â§U) ‚ü©
  b * U + 2 * sectc-node-bound h * U  ‚â°‚ü® Nat.*-distrib ≥-+ U b (2 * sectc-node-bound h) ‚ü®
  (b + 2 * sectc-node-bound h) * U    ‚â°‚ü® cong (_* U) (Nat.+-comm b (2 * sectc-node-bound h)) ‚ü©
  (2 * sectc-node-bound h + b) * U    ‚â§‚ü® Nat.*-monoÀ°-‚â§ U (geometry-sum _ c‚ÇÅ 2 b h ‚â§-refl) ‚ü©
  sectc-node-bound (suc h) * U        ‚àé where open ‚â§-Reasoning

sectc-bounded-ind-one : ‚àÄ h U (_ : 1 ‚â§ U) ‚Üí
  1 + sectc-node-bound h * U ‚â§ sectc-node-bound (suc h) * U
sectc-bounded-ind-one h U 1‚â§U = begin
  1 + sectc-node-bound h * U                          ‚â§‚ü® Nat.m‚â§m+n (1 + node-bnd) node-bnd ‚ü©
  1 + sectc-node-bound h * U + sectc-node-bound h * U ‚â§‚ü® sectc-bounded-ind-two h U 1‚â§U ‚ü©
  sectc-node-bound (suc h) * U                        ‚àé
  where open ‚â§-Reasoning
        node-bnd = sectc-node-bound h * U

sectc-bounded-ind h       U 1‚â§U (` a)  cps-len = ‚â§-trans (1‚â§sectc-node-bound h) (1‚â§n‚áím‚â§m*n _ _ 1‚â§U)
sectc-bounded-ind h       U 1‚â§U 1/h    cps-len = ‚â§-trans (1‚â§sectc-node-bound h) (1‚â§n‚áím‚â§m*n _ _ 1‚â§U)
sectc-bounded-ind h       U 1‚â§U flat/h (flat/ps {preds = preds} |preds|‚â§U)  = begin
  sectc-size (flat/cc preds)        ‚â°‚ü®‚ü©
  length preds                      ‚â°‚ü® List.length-map flat-pred preds ‚ü®
  length (map flat-pred preds)      ‚â°‚ü® Nat.*-identityÀ° _ ‚ü®
  1 * length (map flat-pred preds)  ‚â§‚ü® Nat.*-mono-‚â§ (1‚â§sectc-node-bound h) |preds|‚â§U ‚ü©
  sectc-node-bound h * U            ‚àé
  where open ‚â§-Reasoning
sectc-bounded-ind {cŒ∫ = cŒ∫‚ÇÅ */cc cŒ∫‚ÇÇ} (suc h) U 1‚â§U (cmh‚ÇÅ */h cmh‚ÇÇ) cps-len = begin
  1 + sectc-size cŒ∫‚ÇÅ + sectc-size cŒ∫‚ÇÇ
    ‚â§‚ü® Nat.+-mono ≥-‚â§ 1 (Nat.+-mono-‚â§
        (sectc-bounded-ind h U 1‚â§U cmh‚ÇÅ (cps-*‚ÇÅ cps-len))
        (sectc-bounded-ind h U 1‚â§U cmh‚ÇÇ (cps-*‚ÇÇ cps-len))) ‚ü©
  1 + sectc-node-bound h * U + sectc-node-bound h * U   ‚â§‚ü® sectc-bounded-ind-two h U 1‚â§U ‚ü©
  sectc-node-bound (suc h) * U                          ‚àé
  where open ‚â§-Reasoning
sectc-bounded-ind {cŒ∫ = cŒ∫‚ÇÅ +/cc cŒ∫‚ÇÇ} (suc h) U 1‚â§U (cmh‚ÇÅ +/h cmh‚ÇÇ) cps-len = begin
  1 + sectc-size cŒ∫‚ÇÅ + sectc-size cŒ∫‚ÇÇ
    ‚â§‚ü® Nat.+-mono ≥-‚â§ 1 (Nat.+-mono-‚â§
        (sectc-bounded-ind h U 1‚â§U cmh‚ÇÅ (cps-+‚ÇÅ cps-len))
        (sectc-bounded-ind h U 1‚â§U cmh‚ÇÇ (cps-+‚ÇÇ cps-len))) ‚ü©
  1 + sectc-node-bound h * U + sectc-node-bound h * U   ‚â§‚ü® sectc-bounded-ind-two h U 1‚â§U ‚ü©
  sectc-node-bound (suc h) * U                          ‚àé
  where open ‚â§-Reasoning
sectc-bounded-ind {cŒ∫ = box/cc cŒ∫} (suc h) U 1‚â§U (box/h cmh) cps-len = begin
  1 + sectc-size cŒ∫             ‚â§‚ü® Nat.+-mono ≥-‚â§ 1 (sectc-bounded-ind h U 1‚â§U cmh (cps-box cps-len)) ‚ü©
  1 + sectc-node-bound h * U    ‚â§‚ü® sectc-bounded-ind-one h U 1‚â§U ‚ü©
  sectc-node-bound (suc h) * U  ‚àé
  where open ‚â§-Reasoning
sectc-bounded-ind {cŒ∫ = cŒ∫‚Çê ‚Üí/cc cŒ∫·µ£} (suc h) U 1‚â§U (cmh‚Çê ‚Üí/h cmh·µ£) cps-len = begin
  1 + sectc-size cŒ∫‚Çê + sectc-size cŒ∫·µ£
    ‚â§‚ü® Nat.+-mono ≥-‚â§ 1 (Nat.+-mono-‚â§
        (sectc-bounded-ind h U 1‚â§U cmh‚Çê (cps-dom cps-len))
        (sectc-bounded-ind h U 1‚â§U cmh·µ£ (cps-rng cps-len))) ‚ü©
  1 + sectc-node-bound h * U + sectc-node-bound h * U   ‚â§‚ü® sectc-bounded-ind-two h U 1‚â§U ‚ü©
  sectc-node-bound (suc h) * U                          ‚àé
  where open ‚â§-Reasoning
sectc-bounded-ind {cŒ∫ = Œº/cc cŒ∫} (suc h) U 1‚â§U (Œº/h cmh) cps-len = begin
  1 + sectc-size cŒ∫             ‚â§‚ü® Nat.+-mono ≥-‚â§ 1 (sectc-bounded-ind h U 1‚â§U cmh (cps-Œº‚Ä≤ cps-len)) ‚ü©
  1 + sectc-node-bound h * U    ‚â§‚ü® sectc-bounded-ind-one h U 1‚â§U ‚ü©
  sectc-node-bound (suc h) * U  ‚àé where open ‚â§-Reasoning
